{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AWS Observability Accelerator for Terraform","text":"<p>Welcome to the AWS Observability Accelerator for Terraform!</p> <p>The AWS Observability accelerator is a set of Terraform modules to help you configure Observability for your workloads and environemnts  with AWS Observability services. This project proposes a core module to bootstrap your cluster with the AWS Distro for OpenTelemetry (ADOT) Operator for EKS, Amazon Managed Service for Prometheus, Amazon Managed Grafana. Additionally we have a set of workload modules to leverage curated ADOT collector configurations, Grafana dashboards, Prometheus recording rules and alerts.</p> <p></p>"},{"location":"#getting-started","title":"Getting started","text":"<p>This project provides a set of Terraform modules to enable metrics collection, dashboards and alerts for monitoring:</p> <ul> <li>Amazon EKS clusters infrastructure</li> <li>NGINX workloads (running on Amazon EKS)</li> <li>Java/JMX workloads (running on Amazon EKS)</li> <li>Amazon Managed Service for Prometheus workspaces with Amazon CloudWatch</li> </ul> <p>These modules can be directly configured in your exisiting Terraform configurations or ready to be deployed in our packaged examples</p> <p>We have supporting examples for quick setup such as:</p> <ul> <li>Creating an empty Amazon EKS cluster and a VPC</li> <li>Creating and configure an Amazon Managed Grafana workspace with SSO</li> </ul>"},{"location":"#motivation","title":"Motivation","text":"<p>To gain deep visibility into your workloads and environements, AWS proposes a set of secure, scalabale, highly available, production-grade managed open source services such as Amazon Managed Service for Prometheus, Amazon Managed Grafana and Amazon OpenSearch.</p> <p>AWS customers have asked for best-practices and guidance to collect metrics, logs and traces from their containerized applications and microservices with ease of deployment. Customers can use the AWS Observability Accelerator to configure their metrics collection, leveraging AWS Distro for OpenTelemetry, to have opinionated dashoards and alerts available in only minutes.</p>"},{"location":"#support-feedback","title":"Support &amp; Feedback","text":"<p>AWS Observability Accelerator for Terraform is maintained by AWS Solution Architects. It is not part of an AWS service and support is provided best-effort by the AWS Observability Accelerator community.</p> <p>To post feedback, submit feature ideas, or report bugs, please use the issues section of this GitHub repo.</p> <p>If you are interested in contributing, see the contribution guide.</p>"},{"location":"concepts/","title":"Concepts","text":""},{"location":"concepts/#prerequisites","title":"Prerequisites","text":"<p>All examples in this repository require the following tools installed</p> <ol> <li>Terraform</li> <li>AWS CLI</li> <li>Kubectl</li> </ol>"},{"location":"concepts/#minimum-iam-policy","title":"Minimum IAM Policy","text":"<p>To run the examples, you need a set of AWS IAM permissions. You can find an example of minimum permissions required in this file.</p> <p>Note: The policy resource is set as <code>*</code> to allow all resources, this is not a recommended practice. You should restrict instead to the ARNs when applicable.</p>"},{"location":"concepts/#terraform-states-and-variables","title":"Terraform states and variables","text":"<p>By default, our examples are using local Terraform states. If you need your Terraform states to be saved remotely, on Amazon S3, visit the terraform remote states documentation.</p> <p>For simplicity, we use Terraform supported environment variables. You can also edit the <code>terraform.tfvars</code> files directly and deploy with <code>terraform apply -var-file=terraform.tfvars</code>. Terraform tfvars file can be useful if you need to track changes as part of a Git repository or CI/CD pipeline.</p> <p>Note: When using <code>tfvars</code> files, always be careful to not store and commit any secrets (keys, passwords, ...)</p>"},{"location":"concepts/#base-module","title":"Base module","text":"<p>The base module allows you to configure the AWS Observability services for your cluster and the AWS Distro for OpenTelemetry (ADOT) Operator as the signals collection mechanism.</p> <p>Here is the minimum configuration to have a new Managed Grafana Workspace, Amazon Managed Service for Prometheus Workspace, ADOT Operator deployed for you and ready to receive your data.</p> <pre><code>module \"eks_observability_accelerator\" {\nsource = \"aws-observability/terraform-aws-observability-accelerator\"\naws_region = \"eu-west-1\"\neks_cluster_id = \"my-eks-cluster\"\n}\n</code></pre> <p>You can optionally reuse existing Workspaces to dissociate their lifecycle from the Terraform state.</p> <pre><code>module \"eks_observability_accelerator\" {\nsource = \"aws-observability/terraform-aws-observability-accelerator\"\naws_region = \"eu-west-1\"\neks_cluster_id = \"my-eks-cluster\"\n\n# prevents creation of a new Amazon Managed Prometheus workspace\nenable_managed_prometheus = false\n\n# reusing existing Amazon Managed Prometheus Workspace\nmanaged_prometheus_workspace_id     = \"ws-abcd123...\"\n\n# prevents creation of a new Amazon Managed Grafana workspace\nenable_managed_grafana       = false\n\nmanaged_grafana_workspace_id = \"g-abcdef123\"\ngrafana_api_key              = var.grafana_api_key\n}\n</code></pre> <p>View all the configuration options in the module's documentation</p>"},{"location":"concepts/#workload-modules","title":"Workload modules","text":"<p>Workloads modules are focused Terraform modules provided in this repository. They essentially provide curated metrics collection, alerts and Grafana dashboards according to the use case. Most of those modules require the base module.</p> <p>You can check the full workload modules list and their documentation here.</p> <p>All the modules come with end-to-end deployable examples.</p>"},{"location":"concepts/#examples","title":"Examples","text":"<p>Examples put modules together in a ready to deploy terraform configuration as a starting point. With little to no configuration, you can run <code>terraform apply</code> and use the deployed resources on your AWS Account.</p> <p>You can find workload examples like Amazon EKS infrstructure monitoring or monitoring your Amazon Managed Service for Prometheus workspace and more.</p>"},{"location":"concepts/#getting-started-with-aws-observability-services","title":"Getting started with AWS Observability services","text":"<p>If you are new to AWS Observability services, or want to dive deeper into them, check our One Observability Workshop for a hands-on experience in a self-paced environement or at an AWS venue.</p>"},{"location":"contributors/","title":"Contributors","text":"<p>The content on this site is maintained by the Solutions Architects from the AWS observability team with support from the AWS service teams and other volunteers from across the organization.</p> <p>Our goal is to make it easier to use AWS Open Source Observability Services.</p> <p>The core team include the following people:</p> <ul> <li>Abhi Khanna</li> <li>Imaya Kumar Jagannathan</li> <li>Jerome DECQ</li> <li>Kevin Lewin</li> <li>Michael Hausenblas</li> <li>Munish Dabra</li> <li>Ramesh Kumar Venkatraman</li> <li>Rodrigue Koffi</li> <li>Toshal Dudhwhala</li> <li>Vara Bonthu</li> <li>Vikram Venkataraman</li> </ul> <p>We welcome the wider open source community and thank those who contribute to this project.</p> <p>Note that all information published on this site is available via the Apache 2.0 license.</p>"},{"location":"eks/","title":"Amazon EKS cluster monitoring","text":"<p>This example demonstrates how to monitor your Amazon Elastic Kubernetes Service (Amazon EKS) cluster with the Observability Accelerator's EKS infrastructure module.</p> <p>Monitoring Amazon Elastic Kubernetes Service (Amazon EKS) has two categories: the control plane and the Amazon EKS nodes (with Kubernetes objects). The Amazon EKS control plane consists of control plane nodes that run the Kubernetes software, such as etcd and the Kubernetes API server. To read more on the components of an Amazon EKS cluster, please read the service documentation.</p> <p>The Amazon EKS infrastructure Terraform modules focuses on metrics collection to Amazon Managed Service for Prometheus using the AWS Distro for OpenTelemetry Operator for Amazon EKS. Additionally, it provides default dashboards to get a comprehensible visibility on the nodes, namespaces, pods, and kubelet operations health. Finally, you get curated Prometheus recording rules and alerts to operate your cluster.</p>"},{"location":"eks/#prerequisites","title":"Prerequisites","text":"<p>Make sure to complete the prerequisites section before proceeding.</p>"},{"location":"eks/#setup","title":"Setup","text":""},{"location":"eks/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd examples/existing-cluster-with-base-and-infra\nterraform init\n</code></pre>"},{"location":"eks/#2-aws-region","title":"2. AWS Region","text":"<p>Specify the AWS Region where the resources will be deployed:</p> <pre><code>export TF_VAR_aws_region=xxx\n</code></pre>"},{"location":"eks/#3-amazon-eks-cluster","title":"3. Amazon EKS Cluster","text":"<p>To run this example, you need to provide your EKS cluster name. If you don't have a cluster ready, visit this example first to create a new one.</p> <p>Specify your cluster name:</p> <pre><code>export TF_VAR_eks_cluster_id=xxx\n</code></pre>"},{"location":"eks/#4-amazon-managed-service-for-prometheus-workspace-optional","title":"4. Amazon Managed Service for Prometheus workspace (optional)","text":"<p>By default, we create an Amazon Managed Service for Prometheus workspace for you. However, if you have an existing workspace you want to reuse, edit and run:</p> <pre><code>export TF_VAR_managed_prometheus_workspace_id=ws-xxx\n</code></pre> <p>To create a workspace outside of Terraform's state, simply run:</p> <pre><code>aws amp create-workspace --alias observability-accelerator --query '.workspaceId' --output text\n</code></pre>"},{"location":"eks/#5-amazon-managed-grafana-workspace","title":"5. Amazon Managed Grafana workspace","text":"<p>To run this example you need an Amazon Managed Grafana workspace. If you have an existing workspace, edit and run:</p> <pre><code>export TF_VAR_managed_grafana_workspace_id=g-xxx\n</code></pre> <p>To create a new one, within this example's Terraform state (sharing the same lifecycle with all the other resources created by Terraform):</p> <ul> <li>Edit main.tf and set <code>enable_managed_grafana = true</code></li> <li>Run</li> </ul> <pre><code>terraform init\nterraform apply -target \"module.eks_observability_accelerator.module.managed_grafana[0].aws_grafana_workspace.this[0]\"\nexport TF_VAR_managed_grafana_workspace_id=$(terraform output --raw managed_grafana_workspace_id)\n</code></pre>"},{"location":"eks/#6-grafana-api-key","title":"6. Grafana API Key","text":"<p>Amazon Managed Grafana provides a control plane API for generating Grafana API keys. As a security best practice, we will provide to Terraform a short lived API key to run the <code>apply</code> or <code>destroy</code> command.</p> <p>Ensure you have necessary IAM permissions (<code>CreateWorkspaceApiKey, DeleteWorkspaceApiKey</code>)</p> <pre><code>export TF_VAR_grafana_api_key=`aws grafana create-workspace-api-key --key-name \"observability-accelerator-$(date +%s)\" --key-role ADMIN --seconds-to-live 1200 --workspace-id $TF_VAR_managed_grafana_workspace_id --query key --output text`\n</code></pre>"},{"location":"eks/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy the example</p> <pre><code>terraform apply\n</code></pre>"},{"location":"eks/#visualization","title":"Visualization","text":"<ol> <li>Prometheus datasource on Grafana</li> </ol> <p>Open your Grafana workspace and under Configuration -&gt; Data sources, you should see <code>aws-observability-accelerator</code>. Open and click <code>Save &amp; test</code>. You should see a notification confirming that the Amazon Managed Service for Prometheus workspace is ready to be used on Grafana.</p> <ol> <li>Grafana dashboards</li> </ol> <p>Go to the Dashboards panel of your Grafana workspace. You should see a list of dashboards under the <code>Observability Accelerator Dashboards</code></p> <p></p> <p>Open a specific dashboard and you should be able to view its visualization</p> <p></p> <ol> <li>Amazon Managed Service for Prometheus rules and alerts</li> </ol> <p>Open the Amazon Managed Service for Prometheus console and view the details of your workspace. Under the <code>Rules management</code> tab, you should find new rules deployed.</p> <p></p> <p>To setup your alert receiver, with Amazon SNS, follow this documentation</p>"},{"location":"eks/#destroy-resources","title":"Destroy resources","text":"<p>If you leave this stack running, you will continue to incur charges. To remove all resources created by Terraform, refresh your Grafana API key and run the command below.</p> <p>Be careful, this command will removing everything created by Terraform. If you wish to keep your Amazon Managed Grafana or Amazon Managed Service for Prometheus workspaces. Remove them from your terraform state before running the destroy command.</p> <pre><code>terraform destroy\n</code></pre> <p>To remove resources from your Terraform state, run</p> <pre><code># grafana workspace\nterraform state rm \"module.eks_observability_accelerator.module.managed_grafana[0].aws_grafana_workspace.this[0]\"\n\n# prometheus workspace\nterraform state rm \"module.eks_observability_accelerator.aws_prometheus_workspace.this[0]\"\n</code></pre> <p>Note: To view all the features proposed by this module, visit the module documentation.</p>"},{"location":"helpers/new-eks-cluster/","title":"Creating a new Amazon EKS cluster with VPC","text":"<p>Note: This example is a subset from this EKS Blueprint example</p> <p>This example deploys the following:</p> <ul> <li>New sample VPC, 3 Private Subnets and 3 Public Subnets</li> <li>Internet gateway for Public Subnets and NAT Gateway for Private Subnets</li> <li>EKS Cluster Control plane with one managed node group</li> </ul>"},{"location":"helpers/new-eks-cluster/#prerequisites","title":"Prerequisites","text":"<p>Make sure to complete the prerequisites section before proceeding.</p>"},{"location":"helpers/new-eks-cluster/#setup","title":"Setup","text":""},{"location":"helpers/new-eks-cluster/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd examples/eks-cluster-with-vpc/\nterraform init\n</code></pre>"},{"location":"helpers/new-eks-cluster/#2-aws-region","title":"2. AWS Region","text":"<p>Specify the AWS Region where the resources will be deployed:</p> <pre><code>export TF_VAR_aws_region=xxx\n</code></pre>"},{"location":"helpers/new-eks-cluster/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy the example</p> <pre><code>terraform apply\n</code></pre>"},{"location":"helpers/new-eks-cluster/#login-to-your-cluster","title":"Login to your cluster","text":"<p>EKS Cluster details can be extracted from terraform output or from AWS Console to get the name of cluster. Use the following commands in your local machine where you want to interact with your EKS Cluster.</p>"},{"location":"helpers/new-eks-cluster/#1-run-update-kubeconfig-command","title":"1. Run <code>update-kubeconfig</code> command","text":"<p><code>~/.kube/config</code> file gets updated with cluster details and certificate from the below command</p> <pre><code>aws eks --region &lt;enter-your-region&gt; update-kubeconfig --name &lt;cluster-name&gt;\n</code></pre>"},{"location":"helpers/new-eks-cluster/#2-list-all-the-worker-nodes-by-running-the-command-below","title":"2. List all the worker nodes by running the command below","text":"<pre><code>kubectl get nodes\n</code></pre>"},{"location":"helpers/new-eks-cluster/#3-list-all-the-pods-running-in-kube-system-namespace","title":"3. List all the pods running in <code>kube-system</code> namespace","text":"<pre><code>kubectl get pods -n kube-system\n</code></pre>"},{"location":"helpers/new-eks-cluster/#cleanup","title":"Cleanup","text":"<p>To clean up your environment, destroy the Terraform modules in reverse order.</p> <p>Destroy the Kubernetes Add-ons, EKS cluster with Node groups and VPC</p> <pre><code>terraform destroy -target=\"module.eks_blueprints_kubernetes_addons\" -auto-approve\nterraform destroy -target=\"module.eks_blueprints\" -auto-approve\nterraform destroy -target=\"module.vpc\" -auto-approve\n</code></pre> <p>Finally, destroy any additional resources that are not in the above modules</p> <pre><code>terraform destroy -auto-approve\n</code></pre>"},{"location":"workloads/java/","title":"Monitor Java/JMX applications running on Amazon EKS","text":"<p>The current example deploys the java workload module, to provide to an existing EKS cluster with an OpenTelemetry collector, curated Grafana dashboards, Prometheus alerting and recording rules with multiple configuration options on the cluster infrastructure.</p>"},{"location":"workloads/java/#prerequisites","title":"Prerequisites","text":"<p>Make sure to complete the prerequisites section before proceeding.</p>"},{"location":"workloads/java/#setup","title":"Setup","text":""},{"location":"workloads/java/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd examples/existing-cluster-java\nterraform init\n</code></pre>"},{"location":"workloads/java/#2-aws-region","title":"2. AWS Region","text":"<p>Specify the AWS Region where the resources will be deployed:</p> <pre><code>export TF_VAR_aws_region=xxx\n</code></pre>"},{"location":"workloads/java/#3-amazon-eks-cluster","title":"3. Amazon EKS Cluster","text":"<p>To run this example, you need to provide your EKS cluster name. If you don't have a cluster ready, visit this example first to create a new one.</p> <p>Specify your cluster name:</p> <pre><code>export TF_VAR_eks_cluster_id=xxx\n</code></pre>"},{"location":"workloads/java/#4-amazon-managed-service-for-prometheus-workspace-optional","title":"4. Amazon Managed Service for Prometheus workspace (optional)","text":"<p>By default, we create an Amazon Managed Service for Prometheus workspace for you. However, if you have an existing workspace you want to reuse, edit and run:</p> <pre><code>export TF_VAR_managed_prometheus_workspace_id=ws-xxx\n</code></pre> <p>To create a workspace outside of Terraform's state, simply run:</p> <pre><code>aws amp create-workspace --alias observability-accelerator --query '.workspaceId' --output text\n</code></pre>"},{"location":"workloads/java/#5-amazon-managed-grafana-workspace","title":"5. Amazon Managed Grafana workspace","text":"<p>To run this example you need an Amazon Managed Grafana workspace. If you have an existing workspace, edit and run:</p> <pre><code>export TF_VAR_managed_grafana_workspace_id=g-xxx\n</code></pre> <p>To create a new one, within this example's Terraform state (sharing the same lifecycle with all the other resources):</p> <ul> <li>Edit main.tf and set <code>enable_managed_grafana = true</code></li> <li>Run</li> </ul> <pre><code>terraform init\nterraform apply -target \"module.eks_observability_accelerator.module.managed_grafana[0].aws_grafana_workspace.this[0]\"\nexport TF_VAR_managed_grafana_workspace_id=$(terraform output --raw managed_grafana_workspace_id)\n</code></pre>"},{"location":"workloads/java/#6-grafana-api-key","title":"6. Grafana API Key","text":"<p>Amazon Managed Grafana provides a control plane API for generating Grafana API keys. As a security best practice, we will provide to Terraform a short lived API key to run the <code>apply</code> or <code>destroy</code> command.</p> <p>Ensure you have necessary IAM permissions (<code>CreateWorkspaceApiKey, DeleteWorkspaceApiKey</code>)</p> <pre><code>export TF_VAR_grafana_api_key=`aws grafana create-workspace-api-key --key-name \"observability-accelerator-$(date +%s)\" --key-role ADMIN --seconds-to-live 1200 --workspace-id $TF_VAR_managed_grafana_workspace_id --query key --output text`\n</code></pre>"},{"location":"workloads/java/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy.</p> <pre><code>terraform apply\n</code></pre>"},{"location":"workloads/java/#visualization","title":"Visualization","text":"<ol> <li>Prometheus datasource on Grafana</li> </ol> <p>Open your Grafana workspace and under Configuration -&gt; Data sources, you will see <code>aws-observability-accelerator</code>. Open and click <code>Save &amp; test</code>. You will then see a notification confirming that the Amazon Managed Service for Prometheus workspace is ready to be used on Grafana.</p> <ol> <li>Grafana dashboards</li> </ol> <p>Go to the Dashboards panel of your Grafana workspace. There will be a folder called <code>Observability Accelerator Dashboards</code></p> <p></p> <p>Open the \"Java/JMX\" dashboard to view its visualization</p> <p></p> <ol> <li>Amazon Managed Service for Prometheus rules and alerts</li> </ol> <p>Open the Amazon Managed Service for Prometheus console and view the details of your workspace. Under the <code>Rules management</code> tab, you will find new rules deployed.</p> <p></p> <p>To setup your alert receiver, with Amazon SNS, follow this documentation</p>"},{"location":"workloads/java/#deploy-an-example-java-application","title":"Deploy an Example Java Application","text":"<p>In this section we will reuse an example from the AWS OpenTelemetry collector repository. For convenience, the steps can be found below.</p> <ol> <li> <p>Clone this repository and navigate to the <code>sample-apps/jmx/</code> directory.</p> </li> <li> <p>Authenticate to Amazon ECR</p> </li> </ol> <pre><code>export AWS_ACCOUNT_ID=`aws sts get-caller-identity --query Account --output text`\nexport AWS_REGION={region}\naws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\n</code></pre> <ol> <li>Create an Amazon ECR repository</li> </ol> <pre><code>aws ecr create-repository --repository-name prometheus-sample-tomcat-jmx \\\n--image-scanning-configuration scanOnPush=true \\\n--region $AWS_REGION\n</code></pre> <ol> <li>Build Docker image and push to ECR.</li> </ol> <pre><code>docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/prometheus-sample-tomcat-jmx:latest .\ndocker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/prometheus-sample-tomcat-jmx:latest\n</code></pre> <ol> <li>Install sample application</li> </ol> <pre><code>export SAMPLE_TRAFFIC_NAMESPACE=javajmx-sample\ncurl https://raw.githubusercontent.com/aws-observability/aws-otel-test-framework/terraform/sample-apps/jmx/examples/prometheus-metrics-sample.yaml &gt; metrics-sample.yaml\nsed -i \"s/{{aws_account_id}}/$AWS_ACCOUNT_ID/g\" metrics-sample.yaml\nsed -i \"s/{{region}}/$AWS_REGION/g\" metrics-sample.yaml\nsed -i \"s/{{namespace}}/$SAMPLE_TRAFFIC_NAMESPACE/g\" metrics-sample.yaml\nkubectl apply -f metrics-sample.yaml\n</code></pre> <p>Verify that the sample application is running:</p> <pre><code>kubectl get pods -n $SAMPLE_TRAFFIC_NAMESPACE\n\nNAME                              READY   STATUS              RESTARTS   AGE\ntomcat-bad-traffic-generator      1/1     Running             0          11s\ntomcat-example-7958666589-2q755   0/1     ContainerCreating   0          11s\ntomcat-traffic-generator          1/1     Running             0          11s\n</code></pre>"},{"location":"workloads/java/#destroy-resources","title":"Destroy resources","text":"<p>If you leave this stack running, you will continue to incur charges. To remove all resources created by Terraform, refresh your Grafana API key and run the command below.</p> <p>Be careful, this command will removing everything created by Terraform. If you wish to keep your Amazon Managed Grafana or Amazon Managed Service for Prometheus workspaces. Remove them from your terraform state before running the destroy command.</p> <pre><code>terraform destroy\n</code></pre> <p>To remove resources from your Terraform state, run</p> <pre><code># grafana workspace\nterraform state rm \"module.eks_observability_accelerator.module.managed_grafana[0].aws_grafana_workspace.this[0]\"\n\n# prometheus workspace\nterraform state rm \"module.eks_observability_accelerator.aws_prometheus_workspace.this[0]\"\n</code></pre>"},{"location":"workloads/managed-prometheus/","title":"Monitoring Amazon Managed Service for Prometheus workspaces","text":"<p>This example allows you to monitor your Amazon Managed Service for Prometheus workspaces using Amazon CloudWatch vended metrics and logs. It also creates configurable CloudWatch alarms for service usage limits. Those informations are displayed in a Managed Grafana workspace dashboard.</p>"},{"location":"workloads/managed-prometheus/#prerequisites","title":"Prerequisites","text":"<p>Make sure to complete the prerequisites section before proceeding.</p> <p>This example doesn't require an Amazon EKS cluster and Kubernetes tools (ex. <code>kubectl</code>).</p>"},{"location":"workloads/managed-prometheus/#setup","title":"Setup","text":""},{"location":"workloads/managed-prometheus/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd examples/managed-prometheus-monitoring\nterraform init\n</code></pre>"},{"location":"workloads/managed-prometheus/#2-aws-region","title":"2. AWS Region","text":"<p>Specify the AWS Region where the resources will be deployed:</p> <pre><code>export TF_VAR_aws_region=xxx\n</code></pre>"},{"location":"workloads/managed-prometheus/#3-amazon-managed-service-for-prometheus-workspace","title":"3. Amazon Managed Service for Prometheus workspace","text":"<p>Specify one or more workspaces in the same Region separated with a comma seperated string.</p> <pre><code>export TF_VAR_managed_prometheus_workspace_id=\"ws-xxx\"\n</code></pre> <p>You can use the following command to create alarms for all of the workspaces in a region.</p> <pre><code>export TF_VAR_managed_prometheus_workspace_id=$(aws amp list-workspaces --query 'workspaces[].workspaceId' --output text |  sed -E 's/\\t/,/g')\n</code></pre>"},{"location":"workloads/managed-prometheus/#4-amazon-managed-grafana-workspace","title":"4. Amazon Managed Grafana workspace","text":"<p>To run this example you need an Amazon Managed Grafana workspace.</p> <pre><code>export TF_VAR_managed_grafana_workspace_id=g-xxx\n</code></pre>"},{"location":"workloads/managed-prometheus/#5-grafana-api-key","title":"5. Grafana API Key","text":"<p>Amazon Managed Grafana provides a control plane API for generating Grafana API keys. As a security best practice, we will provide to Terraform a short lived API key to run the <code>apply</code> or <code>destroy</code> command.</p> <p>Ensure you have necessary IAM permissions (<code>CreateWorkspaceApiKey, DeleteWorkspaceApiKey</code>)</p> <pre><code>export TF_VAR_grafana_api_key=`aws grafana create-workspace-api-key --key-name \"observability-accelerator-$(date +%s)\" --key-role ADMIN --seconds-to-live 1200 --workspace-id $TF_VAR_managed_grafana_workspace_id --query key --output text`\n</code></pre>"},{"location":"workloads/managed-prometheus/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy the example</p> <pre><code>terraform apply\n</code></pre>"},{"location":"workloads/managed-prometheus/#visualization","title":"Visualization","text":""},{"location":"workloads/managed-prometheus/#1-cloudwatch-datasource-on-grafana","title":"1. Cloudwatch datasource on Grafana","text":"<p>Open your Grafana workspace and under Configuration -&gt; Data sources, you should see <code>aws-observability-accelerator-cloudwatch</code>. Open and click <code>Save &amp; test</code>. You should see a notification confirming that the CloudWatch datasource is ready to be used on Grafana.</p>"},{"location":"workloads/managed-prometheus/#2-grafana-dashboards","title":"2. Grafana dashboards","text":"<p>Go to the Dashboards panel of your Grafana workspace. You should see a list of dashboards under the <code>AMP Monitoring Dashboards</code> folder.</p> <p>Open the <code>AMP Accelerator Dashboard</code> to see a visualization of the AMP workspace.</p> <p></p>"},{"location":"workloads/managed-prometheus/#3-amazon-managed-service-for-prometheus-cloudwatch-alarms","title":"3. Amazon Managed Service for Prometheus CloudWatch Alarms.","text":"<p>Open the CloudWatch console and click <code>Alarms</code> &gt; <code>All Alarms</code> to review the service limit alarms.</p> <p></p> <p>In us-east-1 region an alarm is created for billing. This alarm utilizes anomaly detection to detect anomalies in the Estimated Charges billing metric.</p> <p></p>"},{"location":"workloads/nginx/","title":"Monitor Nginx applications running on Amazon EKS","text":"<p>The current example deploys the nginx workload module, to provide an existing EKS cluster with an OpenTelemetry collector, curated Grafana dashboards, Prometheus alerting and recording rules with multiple configuration options on the cluster infrastructure.</p>"},{"location":"workloads/nginx/#prerequisites","title":"Prerequisites","text":"<p>Make sure to complete the prerequisites section before proceeding.</p>"},{"location":"workloads/nginx/#setup","title":"Setup","text":""},{"location":"workloads/nginx/#1-download-sources-and-initialize-terraform","title":"1. Download sources and initialize Terraform","text":"<pre><code>git clone https://github.com/aws-observability/terraform-aws-observability-accelerator.git\ncd examples/existing-cluster-nginx\nterraform init\n</code></pre>"},{"location":"workloads/nginx/#2-aws-region","title":"2. AWS Region","text":"<p>Specify the AWS Region where the resources will be deployed:</p> <pre><code>export TF_VAR_aws_region=xxx\n</code></pre>"},{"location":"workloads/nginx/#3-amazon-eks-cluster","title":"3. Amazon EKS Cluster","text":"<p>To run this example, you need to provide your EKS cluster name. If you don't have a cluster ready, visit this example first to create a new one.</p> <p>Specify your cluster name:</p> <pre><code>export TF_VAR_eks_cluster_id=xxx\n</code></pre>"},{"location":"workloads/nginx/#4-amazon-managed-service-for-prometheus-workspace-optional","title":"4. Amazon Managed Service for Prometheus workspace (optional)","text":"<p>By default, we create an Amazon Managed Service for Prometheus workspace for you. However, if you have an existing workspace you want to reuse, edit and run:</p> <pre><code>export TF_VAR_managed_prometheus_workspace_id=ws-xxx\n</code></pre> <p>To create a workspace outside of Terraform's state, simply run:</p> <pre><code>aws amp create-workspace --alias observability-accelerator --query '.workspaceId' --output text\n</code></pre>"},{"location":"workloads/nginx/#5-amazon-managed-grafana-workspace","title":"5. Amazon Managed Grafana workspace","text":"<p>To run this example you need an Amazon Managed Grafana workspace. If you have an existing workspace, edit and run:</p> <pre><code>export TF_VAR_managed_grafana_workspace_id=g-xxx\n</code></pre> <p>To create a new one, within this example's Terraform state (sharing the same lifecycle with all the other resources):</p> <ul> <li>Edit main.tf and set <code>enable_managed_grafana = true</code></li> <li>Run</li> </ul> <pre><code>terraform init\nterraform apply -target \"module.eks_observability_accelerator.module.managed_grafana[0].aws_grafana_workspace.this[0]\"\nexport TF_VAR_managed_grafana_workspace_id=$(terraform output --raw managed_grafana_workspace_id)\n</code></pre>"},{"location":"workloads/nginx/#6-grafana-api-key","title":"6. Grafana API Key","text":"<p>Amazon Managed Grafana provides a control plane API for generating Grafana API keys. As a security best practice, we will provide to Terraform a short lived API key to run the <code>apply</code> or <code>destroy</code> command.</p> <p>Ensure you have necessary IAM permissions (<code>CreateWorkspaceApiKey, DeleteWorkspaceApiKey</code>)</p> <pre><code>export TF_VAR_grafana_api_key=`aws grafana create-workspace-api-key --key-name \"observability-accelerator-$(date +%s)\" --key-role ADMIN --seconds-to-live 1200 --workspace-id $TF_VAR_managed_grafana_workspace_id --query key --output text`\n</code></pre>"},{"location":"workloads/nginx/#deploy","title":"Deploy","text":"<p>Simply run this command to deploy.</p> <pre><code>terraform apply\n</code></pre>"},{"location":"workloads/nginx/#visualization","title":"Visualization","text":""},{"location":"workloads/nginx/#1-prometheus-datasource-on-grafana","title":"1. Prometheus datasource on Grafana","text":"<p>Open your Grafana workspace and under Configuration -&gt; Data sources, you will see <code>aws-observability-accelerator</code>. Open and click <code>Save &amp; test</code>. You will see a notification confirming that the Amazon Managed Service for Prometheus workspace is ready to be used on Grafana.</p>"},{"location":"workloads/nginx/#2-grafana-dashboards","title":"2. Grafana dashboards","text":"<p>Go to the Dashboards panel of your Grafana workspace. You will see a list of dashboards under the <code>Observability Accelerator Dashboards</code></p> <p></p> <p>Open the NGINX dashboard and you will be able to view its visualization</p> <p></p>"},{"location":"workloads/nginx/#3-amazon-managed-service-for-prometheus-rules-and-alerts","title":"3. Amazon Managed Service for Prometheus rules and alerts","text":"<p>Open the Amazon Managed Service for Prometheus console and view the details of your workspace. Under the <code>Rules management</code> tab, you will find new rules deployed.</p> <p></p> <p>To setup your alert receiver, with Amazon SNS, follow this documentation</p>"},{"location":"workloads/nginx/#deploy-an-example-application-to-visualize","title":"Deploy an Example Application to Visualize","text":"<p>In this section we will deploy sample application and extract metrics using AWS OpenTelemetry collector</p>"},{"location":"workloads/nginx/#1-add-the-helm-incubator-repo","title":"1. Add the helm incubator repo:","text":"<pre><code>helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\n</code></pre>"},{"location":"workloads/nginx/#2-enter-the-following-command-to-create-a-new-namespace","title":"2. Enter the following command to create a new namespace:","text":"<pre><code>kubectl create namespace nginx-ingress-sample\n</code></pre>"},{"location":"workloads/nginx/#3-enter-the-following-commands-to-install-nginx","title":"3. Enter the following commands to install NGINX:","text":"<pre><code>helm install my-nginx ingress-nginx/ingress-nginx \\\n--namespace nginx-ingress-sample \\\n--set controller.metrics.enabled=true \\\n--set-string controller.metrics.service.annotations.\"prometheus\\.io/port\"=\"10254\" \\\n--set-string controller.metrics.service.annotations.\"prometheus\\.io/scrape\"=\"true\"\n</code></pre>"},{"location":"workloads/nginx/#4-set-an-external-ip-variable-to-the-value-of-the-external-ip-column-in-the-row-of-the-nginx-ingress-controller","title":"4. Set an EXTERNAL-IP variable to the value of the EXTERNAL-IP column in the row of the NGINX ingress controller.","text":"<pre><code>EXTERNAL_IP=your-nginx-controller-external-ip\n</code></pre>"},{"location":"workloads/nginx/#5-start-some-sample-nginx-traffic-by-entering-the-following-command","title":"5. Start some sample NGINX traffic by entering the following command.","text":"<pre><code>SAMPLE_TRAFFIC_NAMESPACE=nginx-sample-traffic\ncurl https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/master/k8s-deployment-manifest-templates/deployment-mode/service/cwagent-prometheus/sample_traffic/nginx-traffic/nginx-traffic-sample.yaml |\nsed \"s/{{external_ip}}/$EXTERNAL_IP/g\" |\nsed \"s/{{namespace}}/$SAMPLE_TRAFFIC_NAMESPACE/g\" |\nkubectl apply -f -\n</code></pre>"},{"location":"workloads/nginx/#6-verify-if-the-application-is-running","title":"6. Verify if the application is running","text":"<pre><code>kubectl get pods -n nginx-ingress-sample\n</code></pre>"},{"location":"workloads/nginx/#7-visualize-the-applications-dashboard","title":"7. Visualize the Application's dashboard","text":"<p>Log back into your Managed Grafana Workspace and navigate to the dashboard side panel, click on <code>Observability Accelerator Dashboards</code> Folder and open the <code>NGINX</code> Dashboard.</p>"},{"location":"workloads/nginx/#destroy-resources","title":"Destroy resources","text":"<p>If you leave this stack running, you will continue to incur charges. To remove all resources created by Terraform, refresh your Grafana API key and run the command below.</p> <p>Be careful, this command will removing everything created by Terraform. If you wish to keep your Amazon Managed Grafana or Amazon Managed Service for Prometheus workspaces. Remove them from your terraform state before running the destroy command.</p> <pre><code>terraform destroy\n</code></pre> <p>To remove resources from your Terraform state, run</p> <pre><code># grafana workspace\nterraform state rm \"module.eks_observability_accelerator.module.managed_grafana[0].aws_grafana_workspace.this[0]\"\n\n# prometheus workspace\nterraform state rm \"module.eks_observability_accelerator.aws_prometheus_workspace.this[0]\"\n</code></pre>"}]}